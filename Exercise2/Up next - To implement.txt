I would like to ask you how can I proceed in this code. The main part would be actually to implement some kind of plotting. Also, I see that others implement different kinds

In order, I see that others did:

Nearest Neighbour Heuristic Initial Solution Cplex/TwoOpt/TabuSearch Solver particle swarm optimization ant colony optimization/simulated annealing tabu search Lin-Kernighan heuristic Christofides/Tabu Search Simple Search, Simulated Annealing and Tabu Search Tabu search Genetic Algorithms

As you can see we implemented a 2-opt move for Tabu Search. Each one did different instances, which you can see are customly created as boards, solving TSP there (part 1), then solving it with heuristics (part 2).

Answer:

(Opus)

Experiment with variations of the Tabu Search algorithm, such as reactive tabu tenure, aspiration criteria, intensification/diversification strategies, etc. These advanced techniques can often boost performance.

Tabu Search Variations

Implement aspiration criteria: Allow moves that would normally be tabu if they lead to a solution better than the current best. This helps avoid missing good solutions.
Experiment with reactive tabu tenure: Instead of a fixed tabu tenure, adjust it dynamically based on the search progress. Increase tenure when stuck in a local optima to encourage diversification, and decrease it when finding new best solutions to intensify the search.
Add intensification and diversification mechanisms:


Intensification: When a new best solution is found, restart the search from that solution to thoroughly explore the promising region.
Diversification: If no improvement is made for a certain number of iterations, perturb the current solution significantly (e.g., apply multiple random moves) to escape the local optima.

Visual Representation

Improve the SVG rendering:


Color-code the tour edges based on when they were added (e.g., red for initial, blue for final, spectrum in between). This visualizes how the solution evolves.
Add a legend explaining the color scheme and what the node labels represent.
Draw the circuit board outline and highlight mounting holes distinctly.


Generate an animation or slideshow showing the tour progress over iterations. This could be done by outputting an SVG for the best solution every X iterations, then combining them into a GIF or video.
Create a summary visualization comparing the initial and final solutions side-by-side, with statistics like total cost, runtime, iteration count, etc. This provides a quick overview of the optimization results.
If comparing multiple algorithms, generate visualizations that overlay their tours or show them side-by-side. Use color and labeling to differentiate the algorithms.
Optimize the SVG output for large instances by simplifying paths, rounding coordinates, etc. Ensure the resulting file sizes are manageable.